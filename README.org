* EIP Program Structure
  - Detailed ASCII diagram representing the major components and their relationships.

** ASCII Diagram
#+BEGIN_EXAMPLE
+---------------------------------+
|              EIP                |
+---------------------------------+
| +-- routes: Vec<Route>          |
| +-- file_paths: Vec<String>     |
| +-- run() -> io::Result<()>     |
| +-- verify_route_destination()  |
+---------------------------------+
            |
            | contains
            v
+-----------------------------------------------------+
|             Route                                   |
+-----------------------------------------------------+
| +-- source: Url                                     |
| +-- extension: Option<String>                       |
| +-- transformers: Vec<Arc<dyn Transformer>>         |
| +-- destination: Option<Url>                        | 
| +-- start(location: &str) -> Self                   |
| +-- extension(ext: &str) -> Self                    |
| +-- stream() -> Self                                |
| +-- then(transformer: Arc<dyn Transformer>) -> Self |
| +-- to(location: &str) -> Self                      | 
+-----------------------------------------------------+
            |
            | uses
            v
+------------------------------------------------------------+
|        FileTransformer                                     | 
+------------------------------------------------------------+
| +-- chunk_size: usize                                      |
| +-- new(chunk_size: usize) -> Self                         |
| +-- transform(input: &[u8]) -> io::Result<TransformedData> |
+------------------------------------------------------------+
            ^
            | implements
+------------------------------------------------------------+
|        Transformer trait                                   |
+------------------------------------------------------------+
| +-- transform(input: &[u8]) -> io::Result<TransformedData> |
+------------------------------------------------------------+

+---------------------------------------------------+
|          FileConsumer                             |
+---------------------------------------------------+
| +-- consume(route: &Route) -> io::Result<Vec<u8>> |
+---------------------------------------------------+
            ^
            | implements
+---------------------------------------------------+
|         Consumer trait                            |
+---------------------------------------------------+
| +-- consume(route: &Route) -> io::Result<Vec<u8>> |
+---------------------------------------------------+
#+END_EXAMPLE

** Explanation
   - *EIP*: Central structure handling routes and file monitoring.
     - Uses the =Route= struct to manage details about each transformation and routing operation.

   - *Route*:
     - Represents a transformation route containing source, optional extension filtering, transformers, and a destination.
     - Uses transformers (like =FileTransformer=) and potentially consumers (like =FileConsumer=) to process data.

   - *FileTransformer*:
     - Implements the =Transformer= trait to transform data based on the chunk size.

   - *Transformer trait*:
     - Interface that all transformers must implement to be usable in the =Route=.

   - *FileConsumer*:
     - Implements the =Consumer= trait to consume or process the output of a route.

   - *Consumer trait*:
     - Interface that all consumers must implement to be usable.
